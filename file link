1.DWH SLA - http://honbic-d18097/Reports/powerbi/SLA_DASHBOARD_MONTHLY_MERG
2. BI Power report - https://analytics.vpbank.com.vn/reports/browse
3. Data Dictionary - https://bicc.vpbank.com.vn/pages/dwh/VPB_INTF_BU/index.html#/doc
4. Công cụ khai thác dữ liệu Trino & Superset https://explore-data.vpbank.com.vn/superset/sqllab/ 
https://hoanvpbank.vercel.app/index.html?fbclid=IwAR3lkFPIweQHCrmn7t5wtI6K03sBm3EVPeHDlJ9gdq8PXELHUuSvwX1gc6s
https://drive.google.com/drive/folders/1o2yFO_WM_bDt_6NFG3U8qK1j8UGVVfAF?fbclid=IwAR3Rh0ovNl2cPeI3ug9OYACuLi88dudk4W4W74NVZQOlVgT-TR169CyWSrQ
Drive enterprise data architecture, build strong foundation and structured data systems for leveraging trusted data in driving business outcomes
Thúc đẩy kiến trúc dữ liệu doanh nghiệp, xây dựng nền tảng vững chắc và hệ thống dữ liệu có cấu trúc để tận dụng dữ liệu đáng tin cậy nhằm thúc đẩy kết quả kinh doanh
Develop strategy to deepen the application of diagnostic & predictive analytics across customer journey and business processes 
Phát triển chiến lược để tăng cường ứng dụng phân tích chẩn đoán và dự đoán trong hành trình của khách hàng và quy trình kinh doanh
Develop group strategy and provide oversight on data and analytics practices across the ecosystem subsidiaries to drive economies of scale
Phát triển chiến lược và cung cấp sự giám sát về thực hành dữ liệu và phân tích trên các công ty con trong hệ sinh thái để thúc đẩy tính kinh tế theo quy mô



https://confluence.vpbank.com.vn/pages/viewpage.action?pageId=90440926

<ul class="pro-features">
                                           <a class="get-pro" href="#">Đi đến</a>
                                           <div class="button">
                                                          <a href="#" target="_blank" class="btn">Danh mục dịch vụ</a>
                                                          <a href="#" target="_blank" class="btn">Truy vấn Báo cáo</a>
                                                          <a href="#" target="_blank" class="btn">Từ điển dữ liệu</a>
                                           </div>
</ul>


.pro-features {
              position: fixed;
              right: -300px;
              width: 300px;
              height: auto;
              line-height: 46px;
              font-size: 14px;
              background: #fff;
              text-align: left;
              color: #333;
              top: 50%;
              transform:translateY(-50%);
              box-shadow: -4px 0px 5px #00000036;
              color: #fff;
              z-index: 9999;
              padding:20px 30px 30px 30px;
              -webkit-transition:all 0.4s ease;
              -moz-transition:all 0.4s ease;
              transition:all 0.4s ease;
}
.pro-features.active{
              right:0;
}
.pro-features li.big-title {
              font-weight: 600;
              color: #1A76D1;
              font-size: 15px;
}
.pro-features li.title {
              font-weight: 600;
              color: #1A76D1;
              font-size: 15px;
}
.pro-features .button{}
.pro-features .button .btn {
              width: 100%;
              text-align: center;
              margin-top: 8px;
              display: inline-block;
              float: left;
              font-size: 13px;
              width: 100%;
              text-transform: capitalize;
}
.pro-features li {
              color: #333;
              margin: 0;
              padding: 0;
              line-height: 22px;
              margin-bottom: 10px;
}
.get-pro {
              position: absolute;
              left: -80px;
              width:80px;
              height: 45px;
              line-height: 45px;
              font-size: 14px;
              border-radius: 5px 0 0 5px;
              background: #1A76D1;
              text-align: center;
              color: #fff;
              top: 0;
              cursor: pointer;
              box-shadow: -4px 0px 5px #00000036;
}
.get-pro:hover{
              
}










{
  "name": "be",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "bcrypt": "^5.1.1",
    "bcryptjs": "^2.4.3",
    "compression": "^1.7.4",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.18.3",
    "helmet": "^7.1.0",
    "lodash": "^4.17.21",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.1",
    "nodemon": "^3.1.0",
    "sequelize": "^6.37.1",
    "slugify": "^1.6.6",
    "tedious": "^18.1.0"
  },
  "devDependencies": {
    "@types/express": "^4.17.21",
    "@types/morgan": "^1.9.9",
    "sequelize-cli": "^6.6.2"
  }
}






npx sequelize-cli db:migrate



Sequelize CLI [Node: 21.7.1, CLI: 6.6.2, ORM: 6.37.1]

Loaded configuration file "config\config.json".
Using environment "development".

ERROR: Failed to connect to localhost:1433 - A8050000:error:0A000102:SSL routines:ssl_choose_client_version:unsupported protocol:c:\ws\deps\openssl\openssl\ssl\statem\statem_lib.c:1988:     


PS C:\Users\hoangnt30\Downloads\Backend-vpbank-nodejs>




{
  "development": {
    "host": "HONEDA-D46513\\SQLEXPRESS",
    "dialect": "mssql",
    "username": "sa",
    "password": "Hoangnt30",
    "database": "dev_vBank_eda",
    "logging": "true",
    "timezone": "+07:00",
    "ssl": true
  },
  "test": {
    "username": "root",
    "password": null,
    "database": "database_test",
    "host": "10.39.201.72",
    "dialect": "mysql"
  },
  "production": {
    "username": "root",
    "password": null,
    "database": "database_production",
    "host": "10.39.201.72",
    "dialect": "mysql"
  }
}




PS C:\Users\hoangnt30\Downloads\Backend-vpbank-nodejs> npm run dev

> be@1.0.0 dev     
> nodemon server.js

[nodemon] 3.1.0
[nodemon] to restart at any time, enter `rs`  
[nodemon] watching path(s): *.*
[nodemon] watching extensions: js,mjs,cjs,json
[nodemon] starting `node server.js`
====================================
http://localhost:5173
====================================
server on http://localhost:8888
Unable to connectDB to the database: AccessDeniedError [SequelizeAccessDeniedError]: Login failed for user 'sa'.
    at ConnectionManager.connect (C:\Users\hoangnt30\Downloads\Backend-vpbank-nodejs\node_modules\sequelize\lib\dialects\mssql\connection-manager.js:115:17)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async ConnectionManager._connect (C:\Users\hoangnt30\Downloads\Backend-vpbank-nodejs\node_modules\sequelize\lib\dialects\abstract\connection-manager.js:222:24)
    at async C:\Users\hoangnt30\Downloads\Backend-vpbank-nodejs\node_modules\sequelize\lib\dialects\abstract\connection-manager.js:174:32 {
  parent: ConnectionError: Login failed for user 'sa'.
      at Login7TokenHandler.onErrorMessage (C:\Users\hoangnt30\Downloads\Backend-vpbank-nodejs\node_modules\tedious\lib\token\handler.js:186:19)
      at Readable.<anonymous> (C:\Users\hoangnt30\Downloads\Backend-vpbank-nodejs\node_modules\tedious\lib\token\token-stream-parser.js:18:33)
      at Readable.emit (node:events:519:28)
      at addChunk (node:internal/streams/readable:559:12)
      at readableAddChunkPushObjectMode (node:internal/streams/readable:536:3)
      at Readable.push (node:internal/streams/readable:391:5)
      at nextAsync (node:internal/streams/from:194:22)
      at process.processTicksAndRejections (node:internal/process/task_queues:95:5) {
    code: 'ELOGIN'
  },
  original: ConnectionError: Login failed for user 'sa'.
      at Login7TokenHandler.onErrorMessage (C:\Users\hoangnt30\Downloads\Backend-vpbank-nodejs\node_modules\tedious\lib\token\handler.js:186:19)
      at Readable.<anonymous> (C:\Users\hoangnt30\Downloads\Backend-vpbank-nodejs\node_modules\tedious\lib\token\token-stream-parser.js:18:33)
      at Readable.emit (node:events:519:28)
      at addChunk (node:internal/streams/readable:559:12)
      at readableAddChunkPushObjectMode (node:internal/streams/readable:536:3)
      at Readable.push (node:internal/streams/readable:391:5)
      at nextAsync (node:internal/streams/from:194:22)
      at process.processTicksAndRejections (node:internal/process/task_queues:95:5) {
    code: 'ELOGIN'
  }
}
node:internal/process/promises:289
            triggerUncaughtException(err, true /* fromPromise */);
            ^

AccessDeniedError [SequelizeAccessDeniedError]: Login failed for user 'sa'.
    at ConnectionManager.connect (C:\Users\hoangnt30\Downloads\Backend-vpbank-nodejs\node_modules\sequelize\lib\dialects\mssql\connection-manager.js:115:17)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async ConnectionManager._connect (C:\Users\hoangnt30\Downloads\Backend-vpbank-nodejs\node_modules\sequelize\lib\dialects\abstract\connection-manager.js:222:24)
    at async C:\Users\hoangnt30\Downloads\Backend-vpbank-nodejs\node_modules\sequelize\lib\dialects\abstract\connection-manager.js:174:32 {
  parent: ConnectionError: Login failed for user 'sa'.
      at Login7TokenHandler.onErrorMessage (C:\Users\hoangnt30\Downloads\Backend-vpbank-nodejs\node_modules\tedious\lib\token\handler.js:186:19)
      at Readable.<anonymous> (C:\Users\hoangnt30\Downloads\Backend-vpbank-nodejs\node_modules\tedious\lib\token\token-stream-parser.js:18:33)
      at Readable.emit (node:events:519:28)
      at addChunk (node:internal/streams/readable:559:12)
      at readableAddChunkPushObjectMode (node:internal/streams/readable:536:3)
      at Readable.push (node:internal/streams/readable:391:5)
      at nextAsync (node:internal/streams/from:194:22)
      at process.processTicksAndRejections (node:internal/process/task_queues:95:5) {
    code: 'ELOGIN'
  },
  original: ConnectionError: Login failed for user 'sa'.
      at Login7TokenHandler.onErrorMessage (C:\Users\hoangnt30\Downloads\Backend-vpbank-nodejs\node_modules\tedious\lib\token\handler.js:186:19)
      at Readable.<anonymous> (C:\Users\hoangnt30\Downloads\Backend-vpbank-nodejs\node_modules\tedious\lib\token\token-stream-parser.js:18:33)
      at Readable.emit (node:events:519:28)
      at addChunk (node:internal/streams/readable:559:12)
      at readableAddChunkPushObjectMode (node:internal/streams/readable:536:3)
      at Readable.push (node:internal/streams/readable:391:5)
      at nextAsync (node:internal/streams/from:194:22)
      at process.processTicksAndRejections (node:internal/process/task_queues:95:5) {
    code: 'ELOGIN'
  }
}

Node.js v21.7.1





PS C:\Users\hoangnt30\Downloads\Backend-vpbank-nodejs> npm run dev

> be@1.0.0 dev     
> nodemon server.js

[nodemon] 3.1.0
[nodemon] to restart at any time, enter `rs`
[nodemon] watching path(s): *.*
[nodemon] watching extensions: js,mjs,cjs,json
[nodemon] starting `node server.js`
====================================
http://10.39.201.72:5173
====================================
server on http://localhost:8889
(node:19580) [SEQUELIZE0006] DeprecationWarning: This database engine version is not supported, please update your database server. More information https://github.com/sequelize/sequelize/blob/main/ENGINE.md
(Use `node --trace-deprecation ...` to show where the warning was created)
Connection has been established successfully.




VITE_BE_ENDPOINT = http://localhost:8888/v1/ap


import ClassicEditor from "@ckeditor/ckeditor5-build-classic";
import { CKEditor } from "@ckeditor/ckeditor5-react";
import React, { useEffect, useState } from "react";
import { useDispatch } from "react-redux";
import { useNavigate, useParams } from "react-router-dom";
import { toast } from "sonner";
import { contentActions, useContent } from "../../../features/content/contentSlice";
import {
  fetchAddContent,
  fetchContentById,
  fetchUpdateContent,
} from "../../../features/content/contentThunk";
import uploadAPI from "./../../../api/uploadAPI";
import "./AddEditContent.css";

function AddEditContent() {
  const [state, setState] = useState({
    categoryName: "",
    content: "",
    summarizeContent: "", // Thêm trường summarizeContent
    contentParts: []
  });
  const dispatch = useDispatch();
  const navigation = useNavigate();
  const params = useParams();
  const isEditMode = Boolean(params?.id);
  const { dataOne } = useContent();

  useEffect(() => {
    if (!params?.id) return;
    
    dispatch(fetchContentById(params.id)).then((t) => {
      if (t?.payload?.metadata) {
        const { metadata } = t.payload;
        setState((prev) => ({
          ...prev,
          categoryName: metadata.categoryName,
          content: metadata.content,
          summarizeContent: metadata.summarizeContent,
          contentParts: metadata.contentParts,
        }));
      }
    });
  
    return () => {
      dispatch(contentActions.resetDataOne());
    };
  }, [params?.id]);

  const handleOnSubmit = (event) => {
    event.preventDefault();
  
    if (!state.categoryName || !state.content) {
      toast.error("Vui lòng điền tất cả trường!");
      return;
    }
  
    const data = {
      categoryName: state.categoryName,
      content: state.content,
      summarizeContent: state.summarizeContent,
      contentParts: state.contentParts.map((part) => ({
        partNumber: part.partNumber,
        partContent: part.partContent,
      })),
    };
  
    // Kiểm tra xem params.id có tồn tại không, nếu có gán id từ params.id
    if (params.id) {
      data.id = params.id;
    }
  
    dispatch(isEditMode ? fetchUpdateContent(data) : fetchAddContent(data)).then((t) => {
      if (t?.payload?.metadata) {
        navigation("/admin/contents");
      }
    });
  };

  const handleChange = (event) => {
    const {
      target: { value, name },
    } = event;

    setState((prev) => ({ ...prev, [name]: value }));
  };

  const uploadAdapter = (loader) => {
    return {
      upload: () => {
        return new Promise((resolve, reject) => {
          loader.file.then(async (file) => {
            try {
              if (file) {
                const response = await uploadAPI.postForm([file]);

                resolve({ default: response });
              }
            } catch (error) {
              reject(error);
            }
          });
        });
      },
    };
  };

  const handleAddContentPart = () => {
    const newContentParts = [...state.contentParts];
    newContentParts.push({ partNumber: newContentParts.length + 1, partContent: "" });
    setState((prev) => ({ ...prev, contentParts: newContentParts }));
  };

  // const handleContentPartChange = (index, value) => {
  //   const newContentParts = [...state.contentParts];
  //   newContentParts[index].partContent = value;
  //   setState((prev) => ({ ...prev, contentParts: newContentParts }));
  // }

 
  const handleContentPartChange = (index, value) => {
    const newContentParts = [...state.contentParts]; // Tạo bản sao của mảng contentParts
    newContentParts[index] = { ...newContentParts[index], partContent: value }; // Cập nhật giá trị partContent của phần tử tương ứng
    setState((prev) => ({ ...prev, contentParts: newContentParts }));
  };

  // const handleRemoveContentPart = (index) => {
  //   const newContentParts = [ ...state.contentParts ];
  //   newContentParts.splice(index, 1);
  //   setState((prev) => ({ ...prev, contentParts: newContentParts }));
  // }

  const handleRemoveContentPart = (index) => {
    const newContentParts = [...state.contentParts];
    newContentParts.splice(index, 1);
    setState((prev) => ({ ...prev, contentParts: newContentParts }));
  };

  function uploadPlugin(editor) {
    editor.plugins.get("FileRepository").createUploadAdapter = (loader) => {
      return uploadAdapter(loader);
    };
  }

  return (
    <form onSubmit={handleOnSubmit}>
      <h4 className="text-center">{isEditMode ? "Thay đổi" : "Thêm"} nội dung</h4>

      <div className="form-group">
        <label htmlFor="categoryName">Tên danh mục</label>
        <input
          type="text"
          className="form-control"
          id="categoryName"
          placeholder="VD: Giao thông vận tải đang phát triển"
          name="categoryName"
          value={state.categoryName}
          onChange={handleChange}
        />
      </div>

      <div className="form-group">
        <label htmlFor="summarizeContent">Tóm tắt nội dung</label>
        <input
          type="text"
          className="form-control"
          id="summarizeContent"
          placeholder="Tóm tắt nội dung"
          name="summarizeContent"
          value={state.summarizeContent}
          onChange={handleChange}
        />
      </div>

      <div className="form-group">
        <label htmlFor="content">Nội dung</label>
        <CKEditor
          editor={ClassicEditor}
          data={state.content}
          name="content"
          onChange={(event, editor) => {
            handleChange({ target: { value: editor.getData(), name: "content" } });
          }}
          config={{
            extraPlugins: [uploadPlugin],
          }}
        />
      </div>

      {state.contentParts.map((part, index) => (
        <div key={index} className="part-content-container"> {/* Thêm key={index} vào đây */}
          <div className="form-group content-part">
            <label htmlFor={`partContent${index}`}>Nội dung phần {index + 1}</label>
            <CKEditor
              editor={ClassicEditor}
              data={part.partContent}
              onChange={(event, editor) => {
                handleContentPartChange(index, editor.getData());
              }}
              config={{
                extraPlugins: [uploadPlugin],
              }}
            />
          </div>
          <button 
            type="button"
            className="btn btn-danger btn-sm delete-part-btn"
            onClick={() => handleRemoveContentPart(index)}
          >Xóa</button>
        </div>
      ))}

      <div className="my-4">
        <button type="button" className="btn btn-primary" onClick={handleAddContentPart}>
          Thêm ND Nhỏ
        </button>
      </div>
      

      <button type="submit" className="btn btn-success">
        {isEditMode ? "Lưu thay đổi" : "Tạo mới"}
      </button>
    </form>
  );
}

export default AddEditContent;



